#!/usr/bin/env python3
"""
–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è PigWeight GPU-Accelerated Video System
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def print_banner():
    """–ü–µ—á–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞"""
    print("\n" + "="*70)
    print("üöÄ PigWeight GPU-Accelerated Video Processing System")
    print("="*70)
    print("üìä Features: CUDA ‚Ä¢ Frame Indexing ‚Ä¢ Batch Inference ‚Ä¢ WebRTC")
    print("‚ö° Maximum Performance Video API")
    print("="*70 + "\n")

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç Checking Python version...")
    
    if sys.version_info < (3, 8):
        print(f"‚ùå Python {sys.version_info.major}.{sys.version_info.minor} detected")
        print("‚ö†Ô∏è  Python 3.8+ required")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True

def check_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÅ Setting up directories...")
    
    required_dirs = [
        'uploads',
        'frame_indices',
        'static',
        'logs'
    ]
    
    for directory in required_dirs:
        path = Path(directory)
        if not path.exists():
            path.mkdir(parents=True, exist_ok=True)
            print(f"   üìÇ Created: {directory}")
        else:
            print(f"   ‚úÖ Exists: {directory}")
    
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ Checking dependencies...")
    
    required_packages = [
        ('cv2', 'OpenCV'),
        ('numpy', 'NumPy'),
        ('torch', 'PyTorch'),
        ('fastapi', 'FastAPI'),
    ]
    
    missing_packages = []
    
    for package, name in required_packages:
        try:
            __import__(package)
            print(f"   ‚úÖ {name}")
        except ImportError:
            print(f"   ‚ùå {name} - MISSING")
            missing_packages.append(name)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Missing packages: {', '.join(missing_packages)}")
        print("üí° Install with: pip install -r requirements_gpu.txt")
        return False
    
    return True

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    print("\nüéÆ Checking GPU availability...")
    
    try:
        import torch
        if torch.cuda.is_available():
            device_count = torch.cuda.device_count()
            device_name = torch.cuda.get_device_name(0)
            device_memory = torch.cuda.get_device_properties(0).total_memory / 1e9
            
            print(f"   ‚úÖ CUDA Available")
            print(f"   üî• GPU: {device_name}")
            print(f"   üíæ Memory: {device_memory:.1f}GB")
            print(f"   üìä Devices: {device_count}")
            
            return True
        else:
            print(f"   ‚ö†Ô∏è  CUDA not available - will use CPU")
            return False
    except Exception as e:
        print(f"   ‚ùå GPU check failed: {e}")
        return False

def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüß™ Testing basic functionality...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
        from gpu_video_processor import GPUVideoProcessor
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor = GPUVideoProcessor(
            use_cuda=True,
            max_cache_size=10,
            batch_size=2,
            index_keyframes_only=True
        )
        
        print(f"   ‚úÖ GPU Processor initialized")
        print(f"   üíª Device: {processor.device}")
        print(f"   üî• CUDA: {processor.use_cuda}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Functionality test failed: {e}")
        return False

def start_server(port=8000):
    """–ó–∞–ø—É—Å–∫ GPU —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"\nüöÄ Starting GPU server on port {port}...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('127.0.0.1', port))
        sock.close()
        
        if result == 0:
            print(f"   ‚ö†Ô∏è  Port {port} is already in use")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        print("   üì° Starting FastAPI server...")
        print(f"   üåê Server will be available at: http://localhost:{port}")
        print("   üìä API Documentation: http://localhost:8000/docs")
        print("   üéÆ WebRTC Client: http://localhost:8000/webrtc")
        print("\n   Press Ctrl+C to stop the server\n")
        
        # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
        from gpu_endpoints import create_gpu_app
        import uvicorn
        
        app = create_gpu_app()
        
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=port,
            workers=1,  # GPU requires single worker
            access_log=True,
            log_level="info"
        )
        
        return True
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Server stopped by user")
        return True
    except Exception as e:
        print(f"   ‚ùå Server start failed: {e}")
        return False

def print_usage_info():
    """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("\nüí° USAGE INFORMATION:")
    print("-" * 50)
    print("üîß Configuration:")
    print("   ‚Ä¢ Edit gpu_video_processor.py to customize GPU settings")
    print("   ‚Ä¢ Modify gpu_endpoints.py to add new API endpoints")
    print("   ‚Ä¢ Check requirements_gpu.txt for dependencies")
    print("\nüìä API Endpoints:")
    print("   ‚Ä¢ POST /api/gpu/video/upload - Upload video with GPU indexing")
    print("   ‚Ä¢ GET /api/gpu/video/{id}/frame - Ultra-fast frame access")
    print("   ‚Ä¢ POST /api/gpu/video/{id}/batch_inference - Batch processing")
    print("   ‚Ä¢ GET /api/gpu/video/{id}/stream - GPU-accelerated streaming")
    print("   ‚Ä¢ GET /api/gpu/stats - Performance statistics")
    print("\nüéÆ WebRTC:")
    print("   ‚Ä¢ POST /api/webrtc/start - Start WebRTC stream")
    print("   ‚Ä¢ GET /webrtc - WebRTC client interface")
    print("\nüß™ Testing:")
    print("   ‚Ä¢ python simple_gpu_test.py - Basic functionality test")
    print("   ‚Ä¢ python test_gpu_performance.py - Comprehensive benchmarks")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("Python Version", check_python_version),
        ("Directories", check_directories),
        ("Dependencies", check_dependencies),
        ("GPU Support", check_gpu),
        ("Functionality", test_basic_functionality),
    ]
    
    print("üîç SYSTEM CHECKS:")
    print("-" * 30)
    
    all_passed = True
    for check_name, check_func in checks:
        print(f"\n{check_name}:")
        try:
            result = check_func()
            if not result and check_name in ["Python Version", "Dependencies"]:
                all_passed = False
        except Exception as e:
            print(f"   ‚ùå {check_name} failed: {e}")
            if check_name in ["Python Version", "Dependencies"]:
                all_passed = False
    
    print("\n" + "="*50)
    
    if not all_passed:
        print("‚ùå SYSTEM NOT READY")
        print("üí° Please fix the issues above before starting the server")
        return 1
    
    print("‚úÖ SYSTEM READY")
    print("üéØ All checks passed! Ready to start GPU server.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    print_usage_info()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
    try:
        response = input("\nüöÄ Start GPU server now? (y/N): ").strip().lower()
        if response in ['y', 'yes']:
            start_server()
        else:
            print("\nüí° To start manually: python gpu_endpoints.py")
    except KeyboardInterrupt:
        print("\n\nüëã Goodbye!")
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
