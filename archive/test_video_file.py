#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –≤ —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
"""

import asyncio
import websockets
import requests
import time
import os
from pathlib import Path

class VideoFileTest:
    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.ws_url = "ws://localhost:8000"
        
    def create_test_video(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ"""
        try:
            import cv2
            import numpy as np
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
            test_video_path = "test_video.mp4"
            fourcc = cv2.VideoWriter_fourcc(*'mp4v')
            out = cv2.VideoWriter(test_video_path, fourcc, 10.0, (640, 480))
            
            for i in range(50):  # 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 10 FPS
                # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π –∫–∞–¥—Ä
                frame = np.zeros((480, 640, 3), dtype=np.uint8)
                color = (i * 5, 100, 255 - i * 3)
                cv2.rectangle(frame, (50, 50), (590, 430), color, -1)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞–¥—Ä–∞
                cv2.putText(frame, f'Frame {i+1}/50', (200, 250), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
                
                out.write(frame)
            
            out.release()
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {test_video_path}")
            return test_video_path
            
        except ImportError:
            print("‚ö†Ô∏è  OpenCV –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            return None
    
    async def test_file_upload_and_playback(self, video_file_path=None):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞"""
        print("\nüé¨ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞")
        print("-" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
        if not video_file_path:
            video_file_path = self.create_test_video()
        
        if not video_file_path or not os.path.exists(video_file_path):
            print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return
        
        try:
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
            print("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")
            with open(video_file_path, 'rb') as f:
                files = {'file': (os.path.basename(video_file_path), f, 'video/mp4')}
                data = {
                    'camera': 'file_cam',
                    'id': 'test_session_123'
                }
                
                response = requests.post(
                    f"{self.base_url}/api/video_file/open_ultra_fast",
                    files=files,
                    data=data,
                    timeout=30
                )
            
            if response.status_code == 200:
                file_info = response.json()
                print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
                print(f"   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {file_info.get('duration', 'N/A')} —Å–µ–∫")
                print(f"   ‚Ä¢ FPS: {file_info.get('fps', 'N/A')}")
                print(f"   ‚Ä¢ –ö–∞–¥—Ä–æ–≤: {file_info.get('frame_count', 'N/A')}")
                print(f"   ‚Ä¢ ID —Å–µ—Å—Å–∏–∏: {file_info.get('id', 'N/A')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return
            
            # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
            print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤...")
            session_id = file_info.get('id', 'test_session_123')
            duration = file_info.get('duration', 5)
            
            test_times = [0, duration * 0.25, duration * 0.5, duration * 0.75, duration * 0.9]
            
            for t in test_times:
                try:
                    start_time = time.time()
                    response = requests.get(
                        f"{self.base_url}/api/video_file/frame_ultra_fast",
                        params={'id': session_id, 't': t},
                        timeout=5
                    )
                    end_time = time.time()
                    
                    if response.status_code == 200:
                        frame_size = len(response.content)
                        total_time = (end_time - start_time) * 1000
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                        seek_ms = response.headers.get('X-Seek-Ms', 'N/A')
                        infer_ms = response.headers.get('X-Inference-Ms', 'N/A')
                        encode_ms = response.headers.get('X-Encode-Ms', 'N/A')
                        
                        print(f"   ‚úÖ –ö–∞–¥—Ä t={t:.1f}s: {frame_size} –±–∞–π—Ç ({total_time:.1f}ms)")
                        print(f"      ‚îî‚îÄ Seek: {seek_ms}ms, Infer: {infer_ms}ms, Encode: {encode_ms}ms")
                    else:
                        print(f"   ‚ùå –ö–∞–¥—Ä t={t:.1f}s: HTTP {response.status_code}")
                
                except Exception as e:
                    print(f"   ‚ùå –ö–∞–¥—Ä t={t:.1f}s: {e}")
            
            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket –ø–æ—Ç–æ–∫
            print("\nüåä –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket –ø–æ—Ç–æ–∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞...")
            await self.test_websocket_file_stream(session_id)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞: {e}")
    
    async def test_websocket_file_stream(self, session_id):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç WebSocket –ø–æ—Ç–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞"""
        try:
            uri = f"{self.ws_url}/ws/video_file_ultra_fast?id={session_id}"
            
            frame_count = 0
            start_time = time.time()
            
            async with websockets.connect(uri) as websocket:
                print("   ‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
                timeout_time = start_time + 5
                
                while time.time() < timeout_time and frame_count < 20:
                    try:
                        message = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                        
                        if isinstance(message, bytes):
                            frame_count += 1
                            if frame_count % 5 == 0:  # –ö–∞–∂–¥—ã–π 5-–π –∫–∞–¥—Ä
                                print(f"   üì∫ –ü–æ–ª—É—á–µ–Ω –∫–∞–¥—Ä {frame_count}: {len(message)} –±–∞–π—Ç")
                    
                    except asyncio.TimeoutError:
                        print("   ‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞")
                        break
                
                total_time = time.time() - start_time
                fps = frame_count / total_time if total_time > 0 else 0
                
                print(f"\n   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã WebSocket –ø–æ—Ç–æ–∫–∞:")
                print(f"   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: {frame_count}")
                print(f"   ‚Ä¢ –í—Ä–µ–º—è: {total_time:.1f}s")
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π FPS: {fps:.1f}")
                
                if frame_count > 0:
                    print("   ‚úÖ WebSocket –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                else:
                    print("   ‚ùå WebSocket –ø–æ—Ç–æ–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ WebSocket –ø–æ—Ç–æ–∫–∞: {e}")
    
    def cleanup_test_files(self):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
        test_files = ["test_video.mp4"]
        for file in test_files:
            if os.path.exists(file):
                try:
                    os.remove(file)
                    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file}: {e}")

async def main():
    print("üé¨ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    test = VideoFileTest()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        response = requests.get(f"{test.base_url}/api/health", timeout=3)
        if response.status_code != 200:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        await test.test_file_upload_and_playback()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test.cleanup_test_files()

if __name__ == "__main__":
    asyncio.run(main())
