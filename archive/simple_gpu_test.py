"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ GPU –≤–∏–¥–µ–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
import traceback
import time
import numpy as np

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üß™ Testing imports...")
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        import cv2
        print("‚úÖ OpenCV imported successfully")
        
        import torch
        print(f"‚úÖ PyTorch imported: {torch.__version__}")
        print(f"   CUDA available: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            print(f"   GPU device: {torch.cuda.get_device_name(0)}")
            print(f"   GPU memory: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f}GB")
        
        import numpy as np
        print(f"‚úÖ NumPy imported: {np.__version__}")
        
        # FastAPI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from fastapi import FastAPI
        print("‚úÖ FastAPI imported")
        
        # –ù–∞—à–∏ –º–æ–¥—É–ª–∏
        from gpu_video_processor import GPUVideoProcessor
        print("‚úÖ GPUVideoProcessor imported")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Import error: {e}")
        traceback.print_exc()
        return False

def test_gpu_processor_init():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPU –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    print("\nüöÄ Testing GPU processor initialization...")
    
    try:
        from gpu_video_processor import GPUVideoProcessor
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        processor = GPUVideoProcessor(
            use_cuda=True,  # –ü–æ–ø—Ä–æ–±—É–µ–º —Å GPU, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            max_cache_size=100,  # –ú–∞–ª–µ–Ω—å–∫–∏–π –∫–µ—à –¥–ª—è —Ç–µ—Å—Ç–∞
            batch_size=4,
            index_keyframes_only=True  # –¢–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        )
        
        print(f"‚úÖ GPU Processor initialized")
        print(f"   Device: {processor.device}")
        print(f"   CUDA enabled: {processor.use_cuda}")
        print(f"   Cache size: {processor.max_cache_size}")
        print(f"   Batch size: {processor.batch_size}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        assert hasattr(processor, 'videos'), "Videos dictionary missing"
        assert hasattr(processor, 'frame_indices'), "Frame indices missing"
        assert hasattr(processor, 'frame_cache'), "Frame cache missing"
        assert hasattr(processor, 'stats'), "Stats missing"
        
        print("‚úÖ All processor attributes present")
        
        return processor
        
    except Exception as e:
        print(f"‚ùå Processor initialization error: {e}")
        traceback.print_exc()
        return None

def test_model_initialization(processor):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
    print("\nüß† Testing model initialization...")
    
    try:
        if processor.use_cuda and processor.model is not None:
            print("‚úÖ GPU model initialized")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π forward pass
            with torch.no_grad():
                dummy_input = torch.randn(1, 3, 64, 64).to(processor.device)
                output = processor.model(dummy_input)
                print(f"‚úÖ Model forward pass successful, output shape: {output.shape}")
                
        elif not processor.use_cuda:
            print("‚ÑπÔ∏è  CPU mode - model initialization skipped")
        else:
            print("‚ö†Ô∏è  Model not initialized")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Model test error: {e}")
        traceback.print_exc()
        return False

def test_create_dummy_video():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"""
    print("\nüé¨ Creating dummy test video...")
    
    try:
        import cv2
        import os
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists('uploads'):
            os.makedirs('uploads')
            print("üìÅ Created uploads directory")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
        width, height = 320, 240
        fps = 10
        duration = 2  # 2 —Å–µ–∫—É–Ω–¥—ã
        total_frames = fps * duration
        
        filename = 'uploads/test_video.mp4'
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(filename, fourcc, fps, (width, height))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–∞–¥—Ä—ã
        for i in range(total_frames):
            # –°–æ–∑–¥–∞–µ–º –∫–∞–¥—Ä —Å –∏–∑–º–µ–Ω—è—é—â–∏–º—Å—è —Ü–≤–µ—Ç–æ–º
            frame = np.zeros((height, width, 3), dtype=np.uint8)
            
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            color_value = int(255 * (i / total_frames))
            frame[:, :, 0] = color_value  # –°–∏–Ω–∏–π –∫–∞–Ω–∞–ª
            frame[:, :, 1] = 128  # –ó–µ–ª–µ–Ω—ã–π –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
            frame[:, :, 2] = 255 - color_value  # –ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞—Ç–Ω—ã–π
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∫–∞–¥—Ä–∞
            cv2.putText(frame, f"Frame {i}", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            
            # –î–≤–∏–∂—É—â–∏–π—Å—è –∫—Ä—É–≥
            x = int(width * 0.1 + (width * 0.8) * (i / total_frames))
            y = height // 2
            cv2.circle(frame, (x, y), 20, (0, 255, 255), -1)
            
            out.write(frame)
        
        out.release()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if os.path.exists(filename):
            file_size = os.path.getsize(filename)
            print(f"‚úÖ Test video created: {filename}")
            print(f"   Size: {file_size} bytes")
            print(f"   Duration: {duration}s, FPS: {fps}")
            return filename
        else:
            print("‚ùå Failed to create test video")
            return None
            
    except Exception as e:
        print(f"‚ùå Video creation error: {e}")
        traceback.print_exc()
        return None

def test_video_loading(processor, video_path):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    print(f"\nüìπ Testing video loading: {video_path}")
    
    try:
        if not video_path:
            print("‚ùå No video file provided")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        start_time = time.time()
        result = processor.load_video(video_path, "test_video")
        load_time = time.time() - start_time
        
        print(f"‚úÖ Video loaded successfully in {load_time:.2f}s")
        print(f"   ID: {result['id']}")
        print(f"   FPS: {result['fps']}")
        print(f"   Duration: {result['duration']:.2f}s")
        print(f"   Total frames: {result['total_frames']}")
        print(f"   Resolution: {result['resolution']}")
        print(f"   Index size: {result['index_size']} entries")
        print(f"   Index time: {result['index_time']:.3f}s")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–µ–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        assert "test_video" in processor.videos, "Video not in processor.videos"
        assert "test_video" in processor.video_metadata, "Video metadata missing"
        assert "test_video" in processor.frame_indices, "Frame indices missing"
        
        print("‚úÖ All video data structures populated correctly")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Video loading error: {e}")
        traceback.print_exc()
        return False

def test_frame_access(processor):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–¥—Ä–∞–º"""
    print("\n‚ö° Testing frame access...")
    
    try:
        video_id = "test_video"
        
        if video_id not in processor.videos:
            print("‚ùå Video not loaded, skipping frame access test")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        duration = processor.video_metadata[video_id]['duration']
        print(f"   Video duration: {duration:.2f}s")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–Ω—ã–º –∫–∞–¥—Ä–∞–º
        test_times = [0.0, duration * 0.25, duration * 0.5, duration * 0.75, duration * 0.9]
        
        total_time = 0
        successful_frames = 0
        
        for i, t in enumerate(test_times):
            start_time = time.time()
            frame = processor.get_frame_fast(video_id, t)
            access_time = time.time() - start_time
            total_time += access_time
            
            if frame is not None:
                successful_frames += 1
                print(f"   Frame {i+1} (t={t:.2f}s): {access_time:.3f}s, shape={frame.shape}")
            else:
                print(f"   Frame {i+1} (t={t:.2f}s): FAILED")
        
        avg_time = total_time / len(test_times)
        success_rate = successful_frames / len(test_times)
        
        print(f"‚úÖ Frame access test completed:")
        print(f"   Success rate: {success_rate * 100:.1f}% ({successful_frames}/{len(test_times)})")
        print(f"   Average access time: {avg_time:.3f}s")
        
        return success_rate > 0.8  # 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        
    except Exception as e:
        print(f"‚ùå Frame access error: {e}")
        traceback.print_exc()
        return False

def test_batch_inference(processor):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch inference"""
    print("\nüì¶ Testing batch inference...")
    
    try:
        video_id = "test_video"
        
        if video_id not in processor.videos:
            print("‚ùå Video not loaded, skipping batch inference test")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        duration = processor.video_metadata[video_id]['duration']
        test_times = [0.0, duration * 0.3, duration * 0.6, duration * 0.9]
        
        frames = []
        for t in test_times:
            frame = processor.get_frame_fast(video_id, t)
            if frame is not None:
                frames.append(frame)
        
        if not frames:
            print("‚ùå No frames available for batch inference")
            return False
        
        print(f"   Got {len(frames)} frames for batch processing")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º batch inference
        start_time = time.time()
        results = processor.batch_inference(frames)
        inference_time = time.time() - start_time
        
        print(f"‚úÖ Batch inference completed in {inference_time:.3f}s")
        print(f"   Input frames: {len(frames)}")
        print(f"   Output results: {len(results) if results else 0}")
        print(f"   Average time per frame: {inference_time / len(frames):.3f}s")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results and len(results) == len(frames):
            for i, result in enumerate(results):
                if result:
                    print(f"   Result {i+1}: {result}")
            return True
        else:
            print("‚ö†Ô∏è  Batch inference returned unexpected results")
            return False
            
    except Exception as e:
        print(f"‚ùå Batch inference error: {e}")
        traceback.print_exc()
        return False

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üöÄ Starting PigWeight GPU Comprehensive Test")
    print("=" * 60)
    
    results = []
    
    # 1. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    print("\n" + "="*20 + " PHASE 1: IMPORTS " + "="*20)
    import_success = test_imports()
    results.append(("Imports", import_success))
    
    if not import_success:
        print("‚ùå Critical failure: Cannot proceed without proper imports")
        return
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    print("\n" + "="*15 + " PHASE 2: PROCESSOR INIT " + "="*15)
    processor = test_gpu_processor_init()
    results.append(("Processor Init", processor is not None))
    
    if not processor:
        print("‚ùå Critical failure: Cannot proceed without processor")
        return
    
    # 3. –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏
    print("\n" + "="*18 + " PHASE 3: MODEL TEST " + "="*18)
    model_success = test_model_initialization(processor)
    results.append(("Model Init", model_success))
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    print("\n" + "="*16 + " PHASE 4: VIDEO CREATION " + "="*16)
    video_path = test_create_dummy_video()
    results.append(("Video Creation", video_path is not None))
    
    if not video_path:
        print("‚ùå Cannot proceed without test video")
        return
    
    # 5. –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
    print("\n" + "="*17 + " PHASE 5: VIDEO LOADING " + "="*17)
    loading_success = test_video_loading(processor, video_path)
    results.append(("Video Loading", loading_success))
    
    if not loading_success:
        print("‚ùå Cannot proceed without loaded video")
        return
    
    # 6. –î–æ—Å—Ç—É–ø –∫ –∫–∞–¥—Ä–∞–º
    print("\n" + "="*17 + " PHASE 6: FRAME ACCESS " + "="*17)
    frame_success = test_frame_access(processor)
    results.append(("Frame Access", frame_success))
    
    # 7. Batch inference
    print("\n" + "="*16 + " PHASE 7: BATCH INFERENCE " + "="*16)
    batch_success = test_batch_inference(processor)
    results.append(("Batch Inference", batch_success))
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*60)
    print("üìä COMPREHENSIVE TEST RESULTS")
    print("="*60)
    
    total_tests = len(results)
    passed_tests = sum(1 for _, success in results if success)
    
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{test_name:20} {status}")
    
    print("-" * 60)
    print(f"TOTAL: {passed_tests}/{total_tests} tests passed ({passed_tests/total_tests*100:.1f}%)")
    
    if passed_tests >= total_tests * 0.8:  # 80% success rate
        print("üéâ OVERALL STATUS: EXCELLENT - System ready for production!")
    elif passed_tests >= total_tests * 0.6:  # 60% success rate
        print("üëç OVERALL STATUS: GOOD - Minor issues to address")
    else:
        print("‚ö†Ô∏è  OVERALL STATUS: NEEDS WORK - Major issues detected")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° RECOMMENDATIONS:")
    if not import_success:
        print("   ‚Ä¢ Install missing dependencies: pip install -r requirements_gpu.txt")
    if processor and not processor.use_cuda:
        print("   ‚Ä¢ Consider installing CUDA for better performance")
    if not frame_success:
        print("   ‚Ä¢ Check video codec compatibility")
    if not batch_success:
        print("   ‚Ä¢ Verify model initialization and GPU memory")
    
    print("\nüèÅ Test completed! Check results above.")

if __name__ == "__main__":
    try:
        run_comprehensive_test()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Test interrupted by user")
    except Exception as e:
        print(f"\n\n‚ùå Unexpected error: {e}")
        traceback.print_exc()
