#!/usr/bin/env python3
"""
Test script for Ultra-Fast Video Processing System
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import time
import requests
import asyncio
import websockets
import json
from pathlib import Path

def test_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üè• Testing API Health...")
    
    base_url = "http://localhost:8000"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        response = requests.get(f"{base_url}/")
        print(f"   ‚úÖ Main page: {response.status_code}")
        
        response = requests.get(f"{base_url}/api/models")
        print(f"   ‚úÖ Models API: {response.status_code}")
        
        print("   üéØ All basic endpoints working!")
        
    except Exception as e:
        print(f"   ‚ùå API Health Check Failed: {e}")
        return False
        
    return True

async def test_websocket_connections():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    print("üîå Testing WebSocket Connections...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π WebSocket —Å—á–µ—Ç—á–∏–∫–∞
        uri = "ws://localhost:8000/ws/count"
        
        async with websockets.connect(uri) as websocket:
            print("   ‚úÖ Count WebSocket connected")
            
            # –ñ–¥–µ–º –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π
            for i in range(3):
                message = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                data = json.loads(message)
                print(f"   üìä Received: {data.get('type', 'unknown')}")
                
        print("   üéØ WebSocket test completed!")
        
    except Exception as e:
        print(f"   ‚ùå WebSocket test failed: {e}")
        return False
        
    return True

def test_performance_metrics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("‚ö° Testing Performance Metrics...")
    
    base_url = "http://localhost:8000"
    
    try:
        # –ú–æ–∫–∞–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–∞–¥—Ä–∞
        test_times = []
        
        for i in range(5):
            start_time = time.time()
            
            # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ñ—Ä–µ–π–º–æ–≤–æ–º—É API
            try:
                response = requests.get(
                    f"{base_url}/api/video_file/frame_ultra_fast",
                    params={"id": "test_session", "t": 0.0, "ts": int(time.time() * 1000)},
                    timeout=2.0
                )
                
                if response.status_code == 404:
                    print(f"   ‚ö†Ô∏è  No test session (expected): {response.status_code}")
                else:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    seek_ms = response.headers.get('X-Seek-Ms', '0')
                    infer_ms = response.headers.get('X-Inference-Ms', '0')
                    encode_ms = response.headers.get('X-Encode-Ms', '0')
                    
                    print(f"   üìà Metrics - Seek: {seek_ms}ms, Infer: {infer_ms}ms, Encode: {encode_ms}ms")
                    
            except requests.Timeout:
                print("   ‚è±Ô∏è  Request timeout (expected without file)")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Request error: {e}")
                
            end_time = time.time()
            test_times.append((end_time - start_time) * 1000)
            
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        avg_response_time = sum(test_times) / len(test_times)
        print(f"   üéØ Average response time: {avg_response_time:.1f}ms")
        
    except Exception as e:
        print(f"   ‚ùå Performance test failed: {e}")
        return False
        
    return True

def test_frontend_assets():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("üé® Testing Frontend Assets...")
    
    base_url = "http://localhost:8000"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        assets = [
            "/static/index.html",
            "/static/css/theme.css", 
            "/static/js/stream.js"
        ]
        
        for asset in assets:
            try:
                response = requests.get(f"{base_url}{asset}", timeout=3.0)
                status = "‚úÖ" if response.status_code == 200 else "‚ùå"
                print(f"   {status} {asset}: {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå {asset}: {e}")
                
        print("   üéØ Frontend assets check completed!")
        
    except Exception as e:
        print(f"   ‚ùå Frontend test failed: {e}")
        return False
        
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Ultra-Fast Video Processing System Test")
    print("=" * 50)
    
    # –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("API Health", test_api_health),
        ("Performance Metrics", test_performance_metrics), 
        ("Frontend Assets", test_frontend_assets),
        ("WebSocket Connections", test_websocket_connections),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîç Running {test_name}...")
        
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
                
            results.append((test_name, result))
            
        except Exception as e:
            print(f"   üí• {test_name} crashed: {e}")
            results.append((test_name, False))
            
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 50)
    print("üìã TEST RESULTS SUMMARY")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {status} {test_name}")
        if result:
            passed += 1
            
    print(f"\nüéØ Overall: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All systems operational! Ultra-Fast mode ready!")
    else:
        print("‚ö†Ô∏è  Some issues detected. Check the logs above.")
        
    return passed == total

if __name__ == "__main__":
    print("Starting Ultra-Fast System Test...")
    print("Make sure the server is running on localhost:8000")
    print()
    
    success = asyncio.run(main())
    exit(0 if success else 1)
